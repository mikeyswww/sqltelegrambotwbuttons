from telegram.ext import MessageHandler, filters
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import sqlite3

TOKEN = "BOT_TOKEN"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("notes.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS notes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    note TEXT
)
""")
conn.commit()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="add")],
        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏", callback_data="list")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "add":
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –ø—Ä—è–º–æ –≤ —á–∞—Ç.")
        context.user_data["adding"] = True

    elif query.data == "list":
        cursor.execute("SELECT id, note FROM notes WHERE user_id = ?", (user_id,))
        rows = cursor.fetchall()
        if not rows:
            await query.edit_message_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
            return
        keyboard = [
            [InlineKeyboardButton(f"‚ùå {row[1]}", callback_data=f"delete_{row[0]}")]
            for row in rows
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏ (–Ω–∞–∂–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):", reply_markup=reply_markup)

    elif query.data.startswith("delete_"):
        note_id = int(query.data.split("_")[1])
        cursor.execute("DELETE FROM notes WHERE id = ? AND user_id = ?", (note_id, user_id))
        conn.commit()
        await query.edit_message_text("–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("adding"):
        note_text = update.message.text
        cursor.execute("INSERT INTO notes (user_id, note) VALUES (?, ?)", (update.effective_user.id, note_text))
        conn.commit()
        context.user_data["adding"] = False
        await update.message.reply_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters=None, callback=message_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
